{"ast":null,"code":"var _jsxFileName = \"/home/ishan/dissertation/frontend/src/Recorder.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport audioBufferToWav from 'audiobuffer-to-wav';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Recorder = () => {\n  _s();\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n      mediaRecorderRef.current.start();\n      setRecording(true);\n    });\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n  const handleDataAvailable = e => {\n    if (e.data.size > 0) {\n      audioChunksRef.current.push(e.data);\n    }\n  };\n  const handleUpload = () => {\n    const audioBuffer = audioCtx.createBuffer(1, audioChunksRef.current.length, audioCtx.sampleRate);\n    audioBuffer.getChannelData(0).set(audioChunksRef.current);\n\n    // Convert the AudioBuffer to a WAV file\n    const wavData = audioBufferToWav(audioBuffer);\n\n    // Send the .wav file to the server using an HTTP request\n    fetch('http://localhost:5000/audio-upload', {\n      method: 'POST',\n      body: wavData.buffer,\n      headers: {\n        'Content-Type': 'audio/wav'\n      }\n    }).then(response => response.text()).then(data => {\n      console.log(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: recording,\n      children: \"Start Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !recording,\n      children: \"Stop Recording\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: audioChunksRef.current.length === 0,\n      children: \"Upload Audio\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(Recorder, \"iihCjkzL20K33vHj1iywA3a+uCE=\");\n_c = Recorder;\nexport default Recorder;\nvar _c;\n$RefreshReg$(_c, \"Recorder\");","map":{"version":3,"names":["React","useState","useRef","audioBufferToWav","Recorder","recording","setRecording","mediaRecorderRef","audioChunksRef","startRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","current","MediaRecorder","addEventListener","handleDataAvailable","start","stopRecording","state","stop","e","data","size","push","handleUpload","audioBuffer","audioCtx","createBuffer","length","sampleRate","getChannelData","set","wavData","fetch","method","body","buffer","headers","response","text","console","log","catch","err"],"sources":["/home/ishan/dissertation/frontend/src/Recorder.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport audioBufferToWav from 'audiobuffer-to-wav';\n\nconst Recorder = () => {\n  const [recording, setRecording] = useState(false);\n  const mediaRecorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const startRecording = () => {\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        mediaRecorderRef.current = new MediaRecorder(stream);\n        mediaRecorderRef.current.addEventListener('dataavailable', handleDataAvailable);\n        mediaRecorderRef.current.start();\n        setRecording(true);\n      });\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== 'inactive') {\n      mediaRecorderRef.current.stop();\n      setRecording(false);\n    }\n  };\n\n  const handleDataAvailable = e => {\n    if (e.data.size > 0) {\n      audioChunksRef.current.push(e.data);\n    }\n  };\n\n  const handleUpload = () => {\n    const audioBuffer = audioCtx.createBuffer(1, audioChunksRef.current.length, audioCtx.sampleRate);\n    audioBuffer.getChannelData(0).set(audioChunksRef.current);\n\n    // Convert the AudioBuffer to a WAV file\n    const wavData = audioBufferToWav(audioBuffer);\n\n      // Send the .wav file to the server using an HTTP request\n      fetch('http://localhost:5000/audio-upload', {\n        method: 'POST',\n        body: wavData.buffer,\n        headers: {\n          'Content-Type': 'audio/wav'\n        }\n      }).then(response => response.text()).then(data => {\n        console.log(data);\n        }).catch(err => {\n            console.log(err);\n        });\n\n  };\n\n  return (\n    <div>\n      <button onClick={startRecording} disabled={recording}>Start Recording</button>\n      <button onClick={stopRecording} disabled={!recording}>Stop Recording</button>\n      <button onClick={handleUpload} disabled={audioChunksRef.current.length === 0}>Upload Audio</button>\n    </div>\n  );\n};\n\nexport default Recorder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}